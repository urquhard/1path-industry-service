import jsonimport loggingfrom typing import Listfrom fastapi import APIRouter, HTTPExceptionfrom schemas import TVLSchemaOutfrom settings import settingsfrom sqlalchemy.ext.automap import automap_basefrom sqlalchemy.orm import Sessionfrom sqlalchemy import create_enginefrom sqlalchemy.schema import Tablefrom sqlalchemy import MetaDatafinance_router = APIRouter()engine = create_engine(f"postgresql://{settings.username}:{settings.password}@192.168.0.116:5432/{settings.database}")"""# reflect the tablesBase.prepare(engine, reflect=True)# mapped classes are now created with names by default# matching that of the table name.LoginData = Base.classes.login_datadb_session = Session(engine)"""logger = logging.getLogger(__name__)metadata_obj = MetaData()TVL_schema = Table("TVL_data", metadata_obj, autoload_with=engine)tvl_query = TVL_schema.select()@finance_router.get('/tvl', response_model=TVLSchemaOut)async def get_oracle():    """Oracle main endpoint"""        connection = engine.connect()    tvls = connection.execute(tvl_query).fetchall()        lst = []    res = {"data":lst}        for row in tvls:        lst.append(row._asdict())            return res