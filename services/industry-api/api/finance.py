import jsonimport loggingfrom typing import Listfrom enum import Enumfrom fastapi import APIRouter, HTTPException, Dependsfrom schemas import RowScheme#from settings import settingsfrom sqlalchemy.ext.automap import automap_basefrom sqlalchemy.orm import Sessionfrom sqlalchemy import create_enginefrom sqlalchemy.schema import Tablefrom sqlalchemy import MetaDatafrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_basefrom sqlalchemy import Boolean, Column, ForeignKey, Integer, String, Floatfrom sqlalchemy import and_finance_router = APIRouter()#engine = create_engine(f"postgresql://{settings.username}:{settings.password}@192.168.0.116:5432/{settings.database}")engine = create_engine(f"postgresql://newuser:password@localhost:5432/super_awesome_application")SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)Base = declarative_base()# to do: move to models.pyclass Finance_data(Base):    __tablename__ = "test_data"    index = Column(Integer, primary_key = True)    date = Column(String)    symbol = Column(String)    gecko_id = Column(String)    llama_id = Column(String)    category = Column(String)    chain = Column(String)    address = Column(String)    price = Column(Float)    market_cap = Column(Float)    volume = Column(Float)    TVL = Column(Float)        #CRUDdef get_data_by_all_params(db: Session, symbol: str, gecko_id: str, llama_id: str,                       category: str, chain: str):    return db.query(Finance_data).filter(and_(Finance_data.symbol == symbol,                                              Finance_data.gecko_id == gecko_id,                                              Finance_data.llama_id == llama_id,                                              Finance_data.category == category,                                              Finance_data.chain == chain)).all()def get_data(db: Session, skip: int = 0, limit: int = 100):    return db.query(Finance_data).offset(skip).limit(limit).all()# Dependencydef get_db():    db = SessionLocal()    try:        yield db    finally:        db.close()logger = logging.getLogger(__name__)@finance_router.get("/", response_model=list[RowScheme])def api_data(skip: int = 0, limit: int = 100, symbol: str = "None", gecko_id: str = "None",             llama_id: str = "None", category: str = "None", chain: str = "None", db: Session = Depends(get_db)):    if (symbol == "None" and gecko_id == "None" and llama_id == "None" and category == "None" and chain == "None"):        data = get_data(db, skip=skip, limit=limit)        return data    else:        data = get_data_by_all_params(db, symbol, gecko_id, llama_id, category, chain)        return data"""metadata_obj = MetaData()TVL_schema = Table("TVL_data", metadata_obj, autoload_with=engine)tvl_query = TVL_schema.select()@finance_router.get('/tvl', response_model=TVLSchemaOut)async def get_oracle():        connection = engine.connect()    tvls = connection.execute(tvl_query).fetchall()        lst = []    res = {"data":lst}        for row in tvls:        lst.append(row._asdict())            return res"""