import asynciofrom sqlalchemy import create_engineimport pandas as pdfrom datetime import datetime, timedeltafrom defi.worker import get_full_data, token_categoriesfrom settings.env import envengine = create_engine(f"postgresql://{env.username}:{env.password}@localhost:5432/{env.database}")# add timedelta depending on env.delay# add index validationasync def update_scheduler() -> None:    """    Used for scheduling updates of TVL in postgres    Time for update is located in .env file    Returns    -------    None.    """    while True:        await asyncio.sleep(env.finance_data_delay)        today_date = datetime.today().strftime('%Y-%m-%d')        previous_date = datetime.today() - timedelta(days = env.finance_data_delay / 86400)        new_data = get_full_data(token_industries = token_categories,                                 start_date = previous_date,                                 end_date = today_date)        new_data.to_sql('test_data', engine, if_exists='append')        async def main():    """    Main asyncio function. Initializes TVL and sets it into postgres,    then updating TVL.     Returns    -------    None.    """    if "True" in env.initialize:        today_date = datetime.today().strftime('%Y-%m-%d')        df = get_full_data(token_industries = token_categories,                           start_date = '2021-08-31',                           end_date = today_date)        df.to_sql('test_data', engine, if_exists='replace')        while True:        await asyncio.gather(            update_scheduler()        )if __name__ == "__main__":    asyncio.run(main())